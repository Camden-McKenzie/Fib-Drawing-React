{"ast":null,"code":"var _jsxFileName = \"/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport Point from './point';\nimport DirectionGenerator from './DirectionGenerator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  let current = 1;\n  let prev = 1;\n  let pos = new Point(ctx.canvas.width, ctx.canvas.height);\n  let gen = new DirectionGenerator(Math.PI / 2);\n\n  const draw = (ctx, current, prev) => {\n    ctx.beginPath();\n    ctx.moveTo();\n    ctx.lineTo(pos.x, pos.y);\n    pos.turn(gen.next(), current);\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let frameCount = 0;\n    let animationFrameId; //Our draw came here\n\n    const render = () => {\n      const temp = current;\n      current = current + prev;\n      prev = temp;\n      draw(context, current, prev);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js"],"names":["React","useRef","useEffect","Point","DirectionGenerator","Canvas","props","canvasRef","current","prev","pos","ctx","canvas","width","height","gen","Math","PI","draw","beginPath","moveTo","lineTo","x","y","turn","next","stroke","context","getContext","window","innerWidth","innerHeight","frameCount","animationFrameId","render","temp","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEtB,QAAMC,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;AAEA,MAAIO,OAAO,GAAG,CAAd;AACA,MAAIC,IAAI,GAAG,CAAX;AAEA,MAAIC,GAAG,GAAG,IAAIP,KAAJ,CAAUQ,GAAG,CAACC,MAAJ,CAAWC,KAArB,EAA4BF,GAAG,CAACC,MAAJ,CAAWE,MAAvC,CAAV;AACA,MAAIC,GAAG,GAAG,IAAIX,kBAAJ,CAAuBY,IAAI,CAACC,EAAL,GAAU,CAAjC,CAAV;;AAEA,QAAMC,IAAI,GAAG,CAACP,GAAD,EAAMH,OAAN,EAAeC,IAAf,KAAwB;AAEnCE,IAAAA,GAAG,CAACQ,SAAJ;AACAR,IAAAA,GAAG,CAACS,MAAJ;AACAT,IAAAA,GAAG,CAACU,MAAJ,CAAWX,GAAG,CAACY,CAAf,EAAkBZ,GAAG,CAACa,CAAtB;AACAb,IAAAA,GAAG,CAACc,IAAJ,CAAST,GAAG,CAACU,IAAJ,EAAT,EAAqBjB,OAArB;AACAG,IAAAA,GAAG,CAACe,MAAJ;AACD,GAPD;;AASAxB,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMU,MAAM,GAAGL,SAAS,CAACC,OAAzB;AACA,UAAMmB,OAAO,GAAGf,MAAM,CAACgB,UAAP,CAAkB,IAAlB,CAAhB;AAEAhB,IAAAA,MAAM,CAACC,KAAP,GAAegB,MAAM,CAACC,UAAtB;AACAlB,IAAAA,MAAM,CAACE,MAAP,GAAgBe,MAAM,CAACE,WAAvB;AAEA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ,CATc,CAWd;;AACA,UAAMC,MAAM,GAAG,MAAM;AACnB,YAAMC,IAAI,GAAG3B,OAAb;AACAA,MAAAA,OAAO,GAAGA,OAAO,GAAGC,IAApB;AACAA,MAAAA,IAAI,GAAG0B,IAAP;AACAjB,MAAAA,IAAI,CAACS,OAAD,EAAUnB,OAAV,EAAmBC,IAAnB,CAAJ;AACAwB,MAAAA,gBAAgB,GAAGJ,MAAM,CAACO,qBAAP,CAA6BF,MAA7B,CAAnB;AACD,KAND;;AAOAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACQ,oBAAP,CAA4BJ,gBAA5B;AACD,KAFD;AAGD,GAxBQ,EAwBN,CAACf,IAAD,CAxBM,CAAT;AA0BA,sBAAO;AAAQ,IAAA,GAAG,EAAEX,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9CD;;GAAMD,M;;KAAAA,M;AAiDN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport Point from './point'\nimport DirectionGenerator from './DirectionGenerator'\n\nconst Canvas = props => {\n\n  const canvasRef = useRef(null)\n\n  let current = 1;\n  let prev = 1;\n\n  let pos = new Point(ctx.canvas.width, ctx.canvas.height)\n  let gen = new DirectionGenerator(Math.PI / 2)\n\n  const draw = (ctx, current, prev) => {\n\n    ctx.beginPath()\n    ctx.moveTo()\n    ctx.lineTo(pos.x, pos.y)\n    pos.turn(gen.next(), current)\n    ctx.stroke()\n  }\n\n  useEffect(() => {\n\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    let frameCount = 0\n    let animationFrameId\n\n    //Our draw came here\n    const render = () => {\n      const temp = current\n      current = current + prev\n      prev = temp\n      draw(context, current, prev)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n\n  return <canvas ref={canvasRef} {...props} />\n}\n\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}