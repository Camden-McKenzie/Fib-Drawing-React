{"ast":null,"code":"export default class Point {\n  constructor(x, y, size = 1) {\n    this.x = x;\n    this.y = y;\n    this.size = size;\n  }\n\n  addX(amount) {\n    this.x += amount * this.size;\n  }\n\n  addY(amount) {\n    this.y += amount * this.size;\n  }\n\n  zoom(size) {\n    this.size = size;\n  }\n\n  turn(rad, amount) {\n    this.addX(amount * Math.cos(rad));\n    this.addY(amount * Math.sin(rad));\n  }\n\n}\nexport class DirectionGenerator {\n  constructor(rad) {\n    this.step = rad;\n    this.current = 0;\n  }\n\n  next() {\n    this.current = this.current + this.step;\n    return this.current;\n  }\n\n}","map":{"version":3,"sources":["/Users/camden/git/fid-draw/fib-drawing/src/point.js"],"names":["Point","constructor","x","y","size","addX","amount","addY","zoom","turn","rad","Math","cos","sin","DirectionGenerator","step","current","next"],"mappings":"AAAA,eAAe,MAAMA,KAAN,CAAY;AACzBC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,IAAI,GAAG,CAAd,EAAiB;AAC1B,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEDC,EAAAA,IAAI,CAACC,MAAD,EAAS;AACX,SAAKJ,CAAL,IAAUI,MAAM,GAAG,KAAKF,IAAxB;AACD;;AAEDG,EAAAA,IAAI,CAACD,MAAD,EAAS;AACX,SAAKH,CAAL,IAAUG,MAAM,GAAG,KAAKF,IAAxB;AACD;;AAEDI,EAAAA,IAAI,CAACJ,IAAD,EAAO;AACT,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAEDK,EAAAA,IAAI,CAACC,GAAD,EAAMJ,MAAN,EAAc;AAChB,SAAKD,IAAL,CAAUC,MAAM,GAAGK,IAAI,CAACC,GAAL,CAASF,GAAT,CAAnB;AACA,SAAKH,IAAL,CAAUD,MAAM,GAAGK,IAAI,CAACE,GAAL,CAASH,GAAT,CAAnB;AACD;;AAtBwB;AAyB3B,OAAO,MAAMI,kBAAN,CAAyB;AAC9Bb,EAAAA,WAAW,CAACS,GAAD,EAAM;AACf,SAAKK,IAAL,GAAYL,GAAZ;AACA,SAAKM,OAAL,GAAe,CAAf;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,SAAKD,OAAL,GAAe,KAAKA,OAAL,GAAe,KAAKD,IAAnC;AACA,WAAO,KAAKC,OAAZ;AACD;;AAT6B","sourcesContent":["export default class Point {\n  constructor(x, y, size = 1) {\n    this.x = x;\n    this.y = y;\n    this.size = size\n  }\n\n  addX(amount) {\n    this.x += amount * this.size\n  }\n\n  addY(amount) {\n    this.y += amount * this.size\n  }\n\n  zoom(size) {\n    this.size = size;\n  }\n\n  turn(rad, amount) {\n    this.addX(amount * Math.cos(rad))\n    this.addY(amount * Math.sin(rad))\n  }\n}\n\nexport class DirectionGenerator {\n  constructor(rad) {\n    this.step = rad\n    this.current = 0\n  }\n\n  next() {\n    this.current = this.current + this.step\n    return this.current\n  }\n}"]},"metadata":{},"sourceType":"module"}