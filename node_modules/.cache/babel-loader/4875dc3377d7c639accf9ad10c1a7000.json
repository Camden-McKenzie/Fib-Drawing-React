{"ast":null,"code":"var _jsxFileName = \"/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n\n  const draw = (ctx, frameCount) => {\n    var w = ctx.canvas.width;\n    var h = ctx.canvas.height;\n    ctx.clearRect(0, 0, w, h);\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(w / 2, h, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = document.body.clientWidth; //document.width is obsolete\n\n    canvas.height = document.body.clientHeight; //document.height is obsolete\n\n    let frameCount = 0;\n    let animationFrameId; //Our draw came here\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js"],"names":["React","useRef","useEffect","Canvas","props","canvasRef","draw","ctx","frameCount","w","canvas","width","h","height","clearRect","fillStyle","beginPath","arc","Math","sin","PI","fill","current","context","getContext","document","body","clientWidth","clientHeight","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEtB,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMK,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAChC,QAAIC,CAAC,GAAGF,GAAG,CAACG,MAAJ,CAAWC,KAAnB;AACA,QAAIC,CAAC,GAAGL,GAAG,CAACG,MAAJ,CAAWG,MAAnB;AACAN,IAAAA,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBL,CAApB,EAAuBG,CAAvB;AACAL,IAAAA,GAAG,CAACQ,SAAJ,GAAgB,SAAhB;AACAR,IAAAA,GAAG,CAACS,SAAJ;AACAT,IAAAA,GAAG,CAACU,GAAJ,CAAQR,CAAC,GAAG,CAAZ,EAAeG,CAAf,EAAkB,KAAKM,IAAI,CAACC,GAAL,CAASX,UAAU,GAAG,IAAtB,KAA+B,CAAtD,EAAyD,CAAzD,EAA4D,IAAIU,IAAI,CAACE,EAArE;AACAb,IAAAA,GAAG,CAACc,IAAJ;AACD,GARD;;AAUAnB,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMQ,MAAM,GAAGL,SAAS,CAACiB,OAAzB;AACA,UAAMC,OAAO,GAAGb,MAAM,CAACc,UAAP,CAAkB,IAAlB,CAAhB;AAEAd,IAAAA,MAAM,CAACC,KAAP,GAAec,QAAQ,CAACC,IAAT,CAAcC,WAA7B,CALc,CAK4B;;AAC1CjB,IAAAA,MAAM,CAACG,MAAP,GAAgBY,QAAQ,CAACC,IAAT,CAAcE,YAA9B,CANc,CAM8B;;AAE5C,QAAIpB,UAAU,GAAG,CAAjB;AACA,QAAIqB,gBAAJ,CATc,CAWd;;AACA,UAAMC,MAAM,GAAG,MAAM;AACnBtB,MAAAA,UAAU;AACVF,MAAAA,IAAI,CAACiB,OAAD,EAAUf,UAAV,CAAJ;AACAqB,MAAAA,gBAAgB,GAAGE,MAAM,CAACC,qBAAP,CAA6BF,MAA7B,CAAnB;AACD,KAJD;;AAKAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,oBAAP,CAA4BJ,gBAA5B;AACD,KAFD;AAGD,GAtBQ,EAsBN,CAACvB,IAAD,CAtBM,CAAT;AAwBA,sBAAO;AAAQ,IAAA,GAAG,EAAED,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAvCD;;GAAMD,M;;KAAAA,M;AA0CN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nconst Canvas = props => {\n\n  const canvasRef = useRef(null)\n\n  const draw = (ctx, frameCount) => {\n    var w = ctx.canvas.width\n    var h = ctx.canvas.height\n    ctx.clearRect(0, 0, w, h)\n    ctx.fillStyle = '#000000'\n    ctx.beginPath()\n    ctx.arc(w / 2, h, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI)\n    ctx.fill()\n  }\n\n  useEffect(() => {\n\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    canvas.width = document.body.clientWidth; //document.width is obsolete\n    canvas.height = document.body.clientHeight; //document.height is obsolete\n\n    let frameCount = 0\n    let animationFrameId\n\n    //Our draw came here\n    const render = () => {\n      frameCount++\n      draw(context, frameCount)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n\n  return <canvas ref={canvasRef} {...props} />\n}\n\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}