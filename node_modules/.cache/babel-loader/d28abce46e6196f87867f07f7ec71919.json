{"ast":null,"code":"var _jsxFileName = \"/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport Point from './point';\nimport DirectionGenerator from './point';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  let current = 1;\n  let prev = 1;\n  let pos = new Point(400, 450); //numbers are center of canvas TODO change this to a function\n\n  let gen = new DirectionGenerator(Math.PI / 2);\n\n  const draw = (ctx, frameCount) => {\n    let w = ctx.canvas.width;\n    let h = ctx.canvas.height;\n    ctx.beginPath();\n    ctx.lineTo(pos.x, pos.y);\n    pos.turn(gen.next(), current);\n    const temp = current;\n    current = current + prev;\n    prev = temp;\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let frameCount = 0;\n    let animationFrameId; //Our draw came here\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js"],"names":["React","useRef","useEffect","Point","DirectionGenerator","Canvas","props","canvasRef","current","prev","pos","gen","Math","PI","draw","ctx","frameCount","w","canvas","width","h","height","beginPath","lineTo","x","y","turn","next","temp","context","getContext","window","innerWidth","innerHeight","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,kBAAP,MAA+B,SAA/B;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEtB,QAAMC,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;AAEA,MAAIO,OAAO,GAAG,CAAd;AACA,MAAIC,IAAI,GAAG,CAAX;AAEA,MAAIC,GAAG,GAAG,IAAIP,KAAJ,CAAU,GAAV,EAAe,GAAf,CAAV,CAPsB,CAOQ;;AAC9B,MAAIQ,GAAG,GAAG,IAAIP,kBAAJ,CAAuBQ,IAAI,CAACC,EAAL,GAAU,CAAjC,CAAV;;AAEA,QAAMC,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAChC,QAAIC,CAAC,GAAGF,GAAG,CAACG,MAAJ,CAAWC,KAAnB;AACA,QAAIC,CAAC,GAAGL,GAAG,CAACG,MAAJ,CAAWG,MAAnB;AAEAN,IAAAA,GAAG,CAACO,SAAJ;AACAP,IAAAA,GAAG,CAACQ,MAAJ,CAAWb,GAAG,CAACc,CAAf,EAAkBd,GAAG,CAACe,CAAtB;AACAf,IAAAA,GAAG,CAACgB,IAAJ,CAASf,GAAG,CAACgB,IAAJ,EAAT,EAAqBnB,OAArB;AAEA,UAAMoB,IAAI,GAAGpB,OAAb;AACAA,IAAAA,OAAO,GAAGA,OAAO,GAAGC,IAApB;AACAA,IAAAA,IAAI,GAAGmB,IAAP;AACD,GAXD;;AAaA1B,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMgB,MAAM,GAAGX,SAAS,CAACC,OAAzB;AACA,UAAMqB,OAAO,GAAGX,MAAM,CAACY,UAAP,CAAkB,IAAlB,CAAhB;AAEAZ,IAAAA,MAAM,CAACC,KAAP,GAAeY,MAAM,CAACC,UAAtB;AACAd,IAAAA,MAAM,CAACG,MAAP,GAAgBU,MAAM,CAACE,WAAvB;AAEA,QAAIjB,UAAU,GAAG,CAAjB;AACA,QAAIkB,gBAAJ,CATc,CAWd;;AACA,UAAMC,MAAM,GAAG,MAAM;AACnBnB,MAAAA,UAAU;AACVF,MAAAA,IAAI,CAACe,OAAD,EAAUb,UAAV,CAAJ;AACAkB,MAAAA,gBAAgB,GAAGH,MAAM,CAACK,qBAAP,CAA6BD,MAA7B,CAAnB;AACD,KAJD;;AAKAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXJ,MAAAA,MAAM,CAACM,oBAAP,CAA4BH,gBAA5B;AACD,KAFD;AAGD,GAtBQ,EAsBN,CAACpB,IAAD,CAtBM,CAAT;AAwBA,sBAAO;AAAQ,IAAA,GAAG,EAAEP,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhDD;;GAAMD,M;;KAAAA,M;AAmDN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport Point from './point'\nimport DirectionGenerator from './point'\n\nconst Canvas = props => {\n\n  const canvasRef = useRef(null)\n\n  let current = 1;\n  let prev = 1;\n\n  let pos = new Point(400, 450) //numbers are center of canvas TODO change this to a function\n  let gen = new DirectionGenerator(Math.PI / 2)\n\n  const draw = (ctx, frameCount) => {\n    let w = ctx.canvas.width\n    let h = ctx.canvas.height\n\n    ctx.beginPath();\n    ctx.lineTo(pos.x, pos.y);\n    pos.turn(gen.next(), current)\n\n    const temp = current\n    current = current + prev\n    prev = temp\n  }\n\n  useEffect(() => {\n\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    let frameCount = 0\n    let animationFrameId\n\n    //Our draw came here\n    const render = () => {\n      frameCount++\n      draw(context, frameCount)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n\n  return <canvas ref={canvasRef} {...props} />\n}\n\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}