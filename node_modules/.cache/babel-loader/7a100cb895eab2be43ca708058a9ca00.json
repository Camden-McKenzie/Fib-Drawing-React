{"ast":null,"code":"var _jsxFileName = \"/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport Point from './point';\nimport DirectionGenerator from './DirectionGenerator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  let current = 1;\n  let prev = 1;\n  let gen = new DirectionGenerator(Math.PI / 2);\n\n  const draw = (ctx, current, pos) => {\n    ctx.beginPath();\n    ctx.moveTo(pos.x, pos.y);\n    pos.turn(gen.next(), current);\n    ctx.lineTo(pos.x, pos.y);\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let zoom = 0.1;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let pos = new Point(canvas.width / 2, canvas.height / 2, zoom);\n    let frameCount = 0;\n    let animationFrameId; //Our draw came here\n\n    const render = () => {\n      frameCount++;\n      pos.zoom();\n      const temp = current;\n      current = current + prev;\n      prev = temp;\n      draw(context, current, pos);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/camden/git/fid-draw/fib-drawing/src/Canvas.js"],"names":["React","useRef","useEffect","Point","DirectionGenerator","Canvas","props","canvasRef","current","prev","gen","Math","PI","draw","ctx","pos","beginPath","moveTo","x","y","turn","next","lineTo","stroke","canvas","context","getContext","zoom","width","window","innerWidth","height","innerHeight","frameCount","animationFrameId","render","temp","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEtB,QAAMC,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;AAEA,MAAIO,OAAO,GAAG,CAAd;AACA,MAAIC,IAAI,GAAG,CAAX;AAEA,MAAIC,GAAG,GAAG,IAAIN,kBAAJ,CAAuBO,IAAI,CAACC,EAAL,GAAU,CAAjC,CAAV;;AAEA,QAAMC,IAAI,GAAG,CAACC,GAAD,EAAMN,OAAN,EAAeO,GAAf,KAAuB;AAElCD,IAAAA,GAAG,CAACE,SAAJ;AACAF,IAAAA,GAAG,CAACG,MAAJ,CAAWF,GAAG,CAACG,CAAf,EAAkBH,GAAG,CAACI,CAAtB;AACAJ,IAAAA,GAAG,CAACK,IAAJ,CAASV,GAAG,CAACW,IAAJ,EAAT,EAAqBb,OAArB;AACAM,IAAAA,GAAG,CAACQ,MAAJ,CAAWP,GAAG,CAACG,CAAf,EAAkBH,GAAG,CAACI,CAAtB;AACAL,IAAAA,GAAG,CAACS,MAAJ;AACD,GAPD;;AASArB,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMsB,MAAM,GAAGjB,SAAS,CAACC,OAAzB;AACA,UAAMiB,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAhB;AAEA,QAAIC,IAAI,GAAG,GAAX;AAEAH,IAAAA,MAAM,CAACI,KAAP,GAAeC,MAAM,CAACC,UAAtB;AACAN,IAAAA,MAAM,CAACO,MAAP,GAAgBF,MAAM,CAACG,WAAvB;AAEA,QAAIjB,GAAG,GAAG,IAAIZ,KAAJ,CAAUqB,MAAM,CAACI,KAAP,GAAe,CAAzB,EAA4BJ,MAAM,CAACO,MAAP,GAAgB,CAA5C,EAA+CJ,IAA/C,CAAV;AAGA,QAAIM,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ,CAdc,CAgBd;;AACA,UAAMC,MAAM,GAAG,MAAM;AACnBF,MAAAA,UAAU;AACVlB,MAAAA,GAAG,CAACY,IAAJ;AACA,YAAMS,IAAI,GAAG5B,OAAb;AACAA,MAAAA,OAAO,GAAGA,OAAO,GAAGC,IAApB;AACAA,MAAAA,IAAI,GAAG2B,IAAP;AACAvB,MAAAA,IAAI,CAACY,OAAD,EAAUjB,OAAV,EAAmBO,GAAnB,CAAJ;AACAmB,MAAAA,gBAAgB,GAAGL,MAAM,CAACQ,qBAAP,CAA6BF,MAA7B,CAAnB;AACD,KARD;;AASAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXN,MAAAA,MAAM,CAACS,oBAAP,CAA4BJ,gBAA5B;AACD,KAFD;AAGD,GA/BQ,EA+BN,CAACrB,IAAD,CA/BM,CAAT;AAiCA,sBAAO;AAAQ,IAAA,GAAG,EAAEN,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApDD;;GAAMD,M;;KAAAA,M;AAuDN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport Point from './point'\nimport DirectionGenerator from './DirectionGenerator'\n\nconst Canvas = props => {\n\n  const canvasRef = useRef(null)\n\n  let current = 1;\n  let prev = 1;\n\n  let gen = new DirectionGenerator(Math.PI / 2)\n\n  const draw = (ctx, current, pos) => {\n\n    ctx.beginPath()\n    ctx.moveTo(pos.x, pos.y)\n    pos.turn(gen.next(), current)\n    ctx.lineTo(pos.x, pos.y)\n    ctx.stroke()\n  }\n\n  useEffect(() => {\n\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    let zoom = 0.1\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    let pos = new Point(canvas.width / 2, canvas.height / 2, zoom)\n\n\n    let frameCount = 0\n    let animationFrameId\n\n    //Our draw came here\n    const render = () => {\n      frameCount++\n      pos.zoom()\n      const temp = current\n      current = current + prev\n      prev = temp\n      draw(context, current, pos)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n\n  return <canvas ref={canvasRef} {...props} />\n}\n\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}